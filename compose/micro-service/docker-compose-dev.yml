services:
  Etcd:
    platform: linux/x86_64 # m1 芯片需要设置 platform
    image: "bitnami/etcd:${ETCD_VERSION}"
    container_name: micro-etcd
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    privileged: true
    volumes:
      - ./etcd/data:/bitnami/etcd/data
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    ports:
      - 2379:2379
      - 2380:2380
    networks:
      - micro-svc

  postgres:
    image: postgres:latest
    container_name: micro-postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - micro-svc-pg-data:/var/lib/postgresql/data
    networks:
      - micro-svc

  mysql8.2:
    platform: linux/x86_64 # m1 芯片需要设置 platform
    image: mysql:8.2.0
    container_name: micro-mysql
    restart: always
    networks:
      - micro-svc
    ports:
      - "3306:3306"
    command: mysqld --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - micro-svc-mysql-data:/var/lib/mysql
      - ./mysql8.2/logs:/var/log/mysql
      - ./mysql8.2/conf/my.cnf:/etc/mysql/conf.d/my.cnf:rw
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - "LANG=C.UTF-8"
      - TZ=Asia/Shanghai

  redis:
    image: redis:5.0
    restart: always
    container_name: micro-redis
    networks:
      - micro-svc
    command: redis-server --requirepass 123456
    ports:
      - "6379:6379"
    volumes:
      - micro-svc-redis-data:/data:rw
      - ./redis5.0:/usr/local/etc/redis:rw
    environment:
      - "LANG=C.UTF-8"
      - TZ=Asia/Shanghai

  # 搜集 kafka 业务日志、存储 prometheus 监控数据 -
  # Kafka for collecting business logs and storing Prometheus monitoring data
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: micro-elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - TZ=Asia/Shanghai
    volumes:
      - ./elastic7.13.4/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - micro-svc

  # 查看 elasticsearch 数据 - Kibana to view Elasticsearch data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: micro-kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=Asia/Shanghai
    restart: always
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - micro-svc

  # jaeger链路追踪 — Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:1.42.0
    container_name: micro-jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
      - TZ=Asia/Shanghai
    depends_on:
      - elasticsearch
    networks:
      - micro-svc

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: micro-zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - micro-svc

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: micro-kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - micro-svc

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka1
    environment:
      DYNAMIC_CONFIG_ENABLED: "TRUE"
    networks:
      - micro-svc

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: micro-rabbitmq
    restart: always
    networks:
      - micro-svc
    ports:
      - "5672:5672"
      - "8081:15672"
    volumes:
      - micro-svc-rabbitmq-data:/var/lib/rabbitmq:rw
      - ./rabbitmq3/logs/:/var/log/rabbitmq
    environment:
      - "LANG=C.UTF-8"
      - TZ=Asia/Shanghai

networks:
  micro-svc:

volumes:
  micro-svc-pg-data:
  micro-svc-mysql-data:
  micro-svc-redis-data:
  micro-svc-rabbitmq-data:
